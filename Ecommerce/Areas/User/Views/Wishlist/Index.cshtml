@model DAL.ViewModels.ProductViewModel
@{
    ViewData["Title"] = "My Wishlist";
    ViewData["showLayout"] = true;
}

<div class="content dash p-4 m-4">
    <h2 class="mb-4 txtCustom">My Wishlist</h2>

    <div class="row">
        @if (Model.ProductDetails.Count > 0)
        {
            foreach (var item in Model.ProductDetails)
            {
                <div class="col-md-3 mb-4">
                    <div class="card h-100 shadow-sm border-0" data-id="@item.Id">
                        <img src="~/images/@item.CoverImage" class="card-img-top p-2"
                            style="height: 250px; object-fit: contain;">
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                            <p class="card-text small text-muted">@item.CategoryName</p>
                            <p class="card-text fw-semibold">â‚¹ @item.Price</p>
                        </div>
                        <div class="card-footer bg-white border-top-0 d-flex justify-content-between align-items-center">
                            <div>
                                @if (item.IsInCart)
                                {
                                    <button class="btn btn-outline-secondary pe-none">
                                        <i class="fa-solid fa-check me-2"></i>Item in Cart
                                    </button>
                                }
                                else
                                {
                                    <button
                                        class="btn @(item.StockQuantity > 0 ? "btn-outline-primary" : "btn-outline-secondary pe-none")" onclick="AddCart(@item.Id)">
                                        <i class="fa-solid fa-cart-plus me-2"></i>Add to Cart
                                    </button>
                                }
                                @if (item.StockQuantity < 1)
                                {
                                    <span class="text-danger">Currently unavailable.</span>
                                }
                            </div>
                            <button class="btn btn-outline-secondary btn-sm removeFromWishlist" data-id="@item.Id"
                                title="Remove">
                                <i class="fa-solid fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p>No items in wishlist.</p>
            </div>
        }
    </div>

    @if (Model.TotalPages > 1)
    {
        <nav>
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                        <a class="page-link"
                            href="@Url.Action("Wishlist", "User", new { pageNumber = i, pageSize = Model.PageSize })">@i</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@section Scripts {
    <script>
        $(document).on('click', '.removeFromWishlist', function () {
            var productId = $(this).data('id');
            $.ajax({
                url: '/User/Wishlist/RemoveFromWishlist',
                type: 'POST',
                data: { productId: productId },
                success: function (response) {
                    if (response.success) {
                        toastr.success("Wishlist updated !!");
                        location.reload();
                    } else if (response.status == 401) {
                        toastr.error("Please log in to use wishlist.");
                    }
                    else if (response.status == 400) {
                        toastr.error("Product not found !!");
                    } else {
                        toastr.error("Something went wrong!");
                    }
                }
            });
        });

        function AddCart(productId) {
            var cartItems = @Html.Raw(Json.Serialize(Model.ProductDetails));
            cartDetails = cartItems.find(b => b.id == productId);
            console.log(cartDetails);

            $.ajax({
                url: '/Cart/AddToCart',
                type: 'POST',
                data: JSON.stringify(cartDetails),
                contentType: "application/json",
                success: function (response) {
                    if (response.success) {
                        toastr.success('Product added to cart successfully!');
                        location.reload();
                    } else if (response.status == 401) {
                        toastr.error('Please Log In Perform this Action');
                    } else if (response.status == 400) {
                        toastr.error('Unable to add to cart.');
                    }

                },
                error: function () {
                    alert('An error occurred while adding the product to the cart.');
                }
            });
        }
    </script>
}